import React from 'react';
import { getTypeColor, calculateDuration } from '../utils.js';
import ExpandableDetails from './ExpandableDetails.js';

const ScheduleItem = ({ item, index, onEdit, onDelete, onPomodoroClick }) => {
  const duration = calculateDuration(item.start_time, item.end_time);
  const isPomodoro = item.details && item.details.toLowerCase().includes('pomodoro');
  const isAutoGenerated = item.isAutoGenerated;
  const isNewlyAdded = item.isNewlyAdded;

  return (
    <div 
      className={`schedule-item relative p-3 mb-3 rounded border-l-4 
                 ${getTypeColor(item.type)} 
                 shadow-sm hover:shadow-md
                 ${isAutoGenerated ? 'ring-1 ring-purple-300 dark:ring-purple-600' : ''}
                 ${isNewlyAdded ? 'ring-1 ring-green-300 dark:ring-green-600' : ''}
                 focus-within:ring-2 focus-within:ring-purple-500 dark:text-gray-100`}
      tabIndex="0"
      aria-label={`${item.activity} from ${item.start_time} to ${item.end_time}`}
      role="article"
    >
      <div className="flex justify-between items-start mb-1 flex-wrap">
        <div className="flex items-center flex-wrap">
          <div className="drag-handle mr-2 text-gray-400 flex items-center">
            <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 8h16M4 16h16" />
            </svg>
          </div>
          <span className="font-semibold text-gray-800 dark:text-gray-100 mr-2">
            {item.activity}
            {isAutoGenerated && (
              <span className="ml-2 inline-flex items-center px-2 py-0.5 rounded text-xs font-medium bg-purple-100 text-purple-800 dark:bg-purple-900 dark:text-purple-200">
                Auto
              </span>
            )}
          </span>
          <div className="inline-flex mr-2">
            <button 
              className="action-btn btn-edit mr-1 transition-colors" 
              title="Edit"
              aria-label={`Edit ${item.activity}`}
              onClick={(e) => {
                e.stopPropagation();
                e.preventDefault();
                onEdit(index);
              }}
            >
              <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z" />
              </svg>
            </button>
            {isPomodoro && (
              <button 
                className="action-btn btn-pomodoro transition-colors flex items-center" 
                title="Show Pomodoro Timer"
                aria-label={`Start Pomodoro timer for ${item.activity}`}
                onClick={(e) => {
                  e.stopPropagation();
                  e.preventDefault();
                  onPomodoroClick(index);
                }}
              >
                <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4" viewBox="0 0 20 20" fill="currentColor">
                  <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm1-12a1 1 0 10-2 0v4a1 1 0 00.293.707l2.828 2.829a1 1 0 101.415-1.415L11 9.586V6z" clipRule="evenodd" />
                </svg>
              </button>
            )}
          </div>
        </div>
        <span className="text-xs font-mono bg-gray-200 dark:bg-gray-700 px-2 py-0.5 rounded text-gray-700 dark:text-gray-300 whitespace-nowrap">
          {item.start_time} - {item.end_time}
        </span>
      </div>
      <div className="text-sm text-gray-600 dark:text-gray-300 flex justify-between items-center flex-wrap">
        <span className="mr-2 details-text flex-grow">
          {item.details ? (
            <ExpandableDetails 
              details={item.details.replace(/Pomodoro[s]?/gi, '<strong class="text-indigo-600 dark:text-indigo-400 font-semibold">$&</strong>')}
              className="text-gray-600 dark:text-gray-300"
            />
          ) : (
            <i className="text-gray-400 dark:text-gray-500">No details</i>
          )}
        </span>
        <div className="ml-auto flex items-center">
          <span className="text-xs text-gray-500 dark:text-gray-400 font-medium whitespace-nowrap mr-2">
            ({duration})
          </span>
          <button 
            className="action-btn btn-delete transition-colors flex items-center" 
            title="Delete"
            aria-label={`Delete ${item.activity}`}
            onClick={(e) => {
              e.stopPropagation();
              e.preventDefault();
              onDelete(index);
            }}
          >
            <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
            </svg>
          </button>
        </div>
      </div>
    </div>
  );
};

export default ScheduleItem;