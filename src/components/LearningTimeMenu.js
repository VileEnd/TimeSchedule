import React, { useState } from 'react';
import { useSchedule } from '../context/ScheduleContext.js';
import { useNotification } from '../context/NotificationContext.js';
import { generateLearningSchedule, defaultLearningConfig } from '../utils/LearningScheduleAlgorithm.js';

const LearningTimeMenu = () => {
  const { scheduleData, setScheduleData, saveToLocalStorage } = useSchedule();
  const { showSuccess, showError, showConfirm } = useNotification();
  const [config, setConfig] = useState(defaultLearningConfig);
  const [isOpen, setIsOpen] = useState(false);
  const [subjectName, setSubjectName] = useState('');
  const [subjectWeight, setSubjectWeight] = useState(1);

  const handleConfigChange = (e) => {
    const { name, value, type } = e.target;
    setConfig({
      ...config,
      [name]: type === 'number' ? parseInt(value, 10) : value
    });
  };

  const handleAddSubject = () => {
    if (!subjectName.trim()) {
      showError('Subject name cannot be empty');
      return;
    }

    setConfig({
      ...config,
      subjectPriorities: [
        ...config.subjectPriorities,
        { name: subjectName.trim(), weight: subjectWeight }
      ].sort((a, b) => b.weight - a.weight) // Sort by weight
    });
    
    setSubjectName('');
    setSubjectWeight(1);
  };

  const handleRemoveSubject = (index) => {
    setConfig({
      ...config,
      subjectPriorities: config.subjectPriorities.filter((_, i) => i !== index)
    });
  };

  const handleGenerateLearningSchedule = () => {
    try {
      // Generate new schedule with learning blocks
      const newSchedule = generateLearningSchedule(scheduleData, config);
      
      // Count how many blocks were added
      let totalBlocksAdded = 0;
      Object.keys(newSchedule).forEach(day => {
        totalBlocksAdded += newSchedule[day].filter(a => a.isAutoGenerated).length;
      });
      
      if (totalBlocksAdded === 0) {
        showError('No suitable time slots found for learning blocks. Try adjusting your settings.');
        return;
      }
      
      // Ask user to confirm
      showConfirm(
        `This will add ${totalBlocksAdded} learning blocks to your schedule. Continue?`,
        () => {
          setScheduleData(newSchedule);
          saveToLocalStorage(newSchedule);
          showSuccess(`Added ${totalBlocksAdded} learning blocks to your schedule`);
          setIsOpen(false);
        }
      );
    } catch (error) {
      console.error('Error generating learning schedule:', error);
      showError('Failed to generate learning schedule');
    }
  };

  return (
    <div className="relative">
      <button
        onClick={() => setIsOpen(!isOpen)}
        className="bg-purple-500 hover:bg-purple-600 text-white font-bold py-2 px-4 rounded transition-colors flex items-center"
        aria-expanded={isOpen}
      >
        <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
        </svg>
        Auto Learning Blocks
      </button>
      
      {isOpen && (
        <div className="absolute right-0 mt-2 w-96 bg-white rounded-lg shadow-xl z-30 p-4 border border-gray-200">
          <h3 className="text-lg font-semibold text-gray-800 mb-3">
            Auto Learning Block Settings
          </h3>
          
          <div className="mb-3">
            <label className="block text-sm font-medium text-gray-700 mb-1">
              Daily Learning Goal (minutes)
            </label>
            <input
              type="number"
              name="dailyLearningMinutes"
              value={config.dailyLearningMinutes}
              onChange={handleConfigChange}
              min="30"
              max="360"
              className="w-full p-2 border border-gray-300 rounded-md shadow-sm focus:ring-purple-500 focus:border-purple-500"
            />
          </div>
          
          <div className="grid grid-cols-2 gap-3 mb-3">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Min Block Duration
              </label>
              <input
                type="number"
                name="minimumLearningBlockMinutes"
                value={config.minimumLearningBlockMinutes}
                onChange={handleConfigChange}
                min="15"
                max="60"
                className="w-full p-2 border border-gray-300 rounded-md shadow-sm focus:ring-purple-500 focus:border-purple-500"
              />
            </div>
            
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Max Block Duration
              </label>
              <input
                type="number"
                name="maximumLearningBlockMinutes"
                value={config.maximumLearningBlockMinutes}
                onChange={handleConfigChange}
                min="30"
                max="180"
                className="w-full p-2 border border-gray-300 rounded-md shadow-sm focus:ring-purple-500 focus:border-purple-500"
              />
            </div>
          </div>
          
          <div className="mb-4">
            <label className="block text-sm font-medium text-gray-700 mb-1">
              Max Learning Blocks Per Day
            </label>
            <input
              type="number"
              name="maximumDailyBlocks"
              value={config.maximumDailyBlocks}
              onChange={handleConfigChange}
              min="1"
              max="10"
              className="w-full p-2 border border-gray-300 rounded-md shadow-sm focus:ring-purple-500 focus:border-purple-500"
            />
          </div>
          
          <div className="mb-4">
            <h4 className="text-sm font-medium text-gray-700 mb-1">Subject Priorities</h4>
            <div className="mb-2">
              {config.subjectPriorities.map((subject, index) => (
                <div key={index} className="flex items-center justify-between mb-1 bg-gray-50 p-2 rounded">
                  <span className="font-medium">{subject.name}</span>
                  <div className="flex items-center">
                    <span className="text-sm text-gray-500 mr-2">Weight: {subject.weight}</span>
                    <button
                      onClick={() => handleRemoveSubject(index)}
                      className="text-red-500 hover:text-red-700"
                    >
                      <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                      </svg>
                    </button>
                  </div>
                </div>
              ))}
            </div>
            
            <div className="flex space-x-2">
              <input
                type="text"
                value={subjectName}
                onChange={(e) => setSubjectName(e.target.value)}
                placeholder="New subject"
                className="flex-1 p-2 border border-gray-300 rounded-md shadow-sm focus:ring-purple-500 focus:border-purple-500"
              />
              <select
                value={subjectWeight}
                onChange={(e) => setSubjectWeight(parseInt(e.target.value, 10))}
                className="w-20 p-2 border border-gray-300 rounded-md shadow-sm focus:ring-purple-500 focus:border-purple-500"
              >
                {[1, 2, 3, 4, 5].map(weight => (
                  <option key={weight} value={weight}>
                    {weight}
                  </option>
                ))}
              </select>
              <button
                onClick={handleAddSubject}
                className="bg-purple-500 text-white p-2 rounded-md hover:bg-purple-600 transition-colors"
              >
                Add
              </button>
            </div>
          </div>
          
          <div className="flex justify-end space-x-3 mt-4">
            <button
              onClick={() => setIsOpen(false)}
              className="px-4 py-2 bg-gray-300 text-gray-800 rounded-md hover:bg-gray-400 transition-colors"
            >
              Cancel
            </button>
            <button
              onClick={handleGenerateLearningSchedule}
              className="px-4 py-2 bg-purple-500 text-white rounded-md hover:bg-purple-600 transition-colors"
            >
              Generate Learning Blocks
            </button>
          </div>
        </div>
      )}
    </div>
  );
};

export default LearningTimeMenu;