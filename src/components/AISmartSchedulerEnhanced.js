import React, { useState } from 'react';
import { useAISettings } from '../context/AISettingsContext.js';
import { useSchedule } from '../context/ScheduleContext.js';
import { useNotification } from '../context/NotificationContext.js';
import { generateOptimizedSchedule } from '../services/OpenAIService.js';
import { defaultLearningConfig } from '../utils/LearningScheduleAlgorithm.js';

const AISmartSchedulerEnhanced = () => {
  const { settings } = useAISettings();
  const { scheduleData, setScheduleData, saveToLocalStorage, clearAllData } = useSchedule();
  const { showSuccess, showError, showConfirm } = useNotification();
  
  const [isOpen, setIsOpen] = useState(false);
  const [isGenerating, setIsGenerating] = useState(false);
  const [config, setConfig] = useState(defaultLearningConfig);
  const [showApiKeyForm, setShowApiKeyForm] = useState(false);
  const [apiKey, setApiKey] = useState('');
  const [showTextInputForm, setShowTextInputForm] = useState(false);
  const [schedulePrompt, setSchedulePrompt] = useState('');
  const [showCalendarForm, setShowCalendarForm] = useState(false);
  const [calendarUrl, setCalendarUrl] = useState('');
  const [showClearConfirm, setShowClearConfirm] = useState(false);

  const handleApiKeySubmit = (e) => {
    e.preventDefault();
    if (!apiKey.trim()) {
      showError('API key cannot be empty');
      return;
    }
    setShowApiKeyForm(false);
  };

  const handleConfigChange = (e) => {
    const { name, value, type } = e.target;
    setConfig({
      ...config,
      [name]: type === 'number' ? parseInt(value, 10) : value
    });
  };

  const handleTextInputSubmit = (e) => {
    e.preventDefault();
    if (!schedulePrompt.trim()) {
      showError('Schedule description cannot be empty');
      return;
    }
    handleGenerateScheduleFromText();
  };

  const handleCalendarFormSubmit = (e) => {
    e.preventDefault();
    if (!calendarUrl.trim()) {
      showError('Calendar URL cannot be empty');
      return;
    }
    handleGenerateScheduleFromCalendar();
  };

  const handleClearConfirmation = () => {
    setShowClearConfirm(true);
  };

  const handleClearConfirm = () => {
    clearAllData();
    showSuccess('Schedule cleared successfully');
    setShowClearConfirm(false);
  };

  const handleClearCancel = () => {
    setShowClearConfirm(false);
  };

  const handleGenerateScheduleFromText = async () => {
    if (!settings.isConnectionValid && !settings.apiKey && !apiKey) {
      setShowApiKeyForm(true);
      return;
    }

    try {
      setIsGenerating(true);
      
      // Use existing API key from settings or temporary one from form
      const keyToUse = settings.apiKey || apiKey;
      
      // Show feedback that we're connecting to OpenAI
      showSuccess('Connecting to OpenAI and generating schedule from your description... This may take 30-60 seconds.', 10000);
      
      // First clear existing data
      clearAllData();
      
      // Custom prompt for the text-based generation
      const textBasedPrompt = `
      Please create a complete weekly schedule based on the following description:
      
      ${schedulePrompt}
      
      The schedule should include all activities mentioned and use appropriate time blocks.
      Organize activities by day of the week (Monday through Sunday).
      
      Each activity should have:
      - activity: string (name of the activity)
      - start_time: string (format "HH:MM")
      - end_time: string (format "HH:MM")
      - type: string (use appropriate categories like "Work", "Study", "Break", "Physical", "Meal", "Sleep", etc.)
      - details: string (brief description)
      - isAutoGenerated: true
      
      YOUR RESPONSE MUST BE A VALID JSON OBJECT ONLY with days of the week as keys.
      `;
      
      // Call the OpenAI service with the custom prompt
      const freshSchedule = await generateOptimizedSchedule(
        {}, // Empty schedule data to start from scratch
        config,
        {
          model: settings.model,
          effort: settings.effort
        },
        keyToUse,
        textBasedPrompt // Pass the custom prompt
      );
      
      // Count how many blocks were added
      let totalBlocksAdded = 0;
      Object.keys(freshSchedule).forEach(day => {
        totalBlocksAdded += freshSchedule[day].length;
      });
      
      if (totalBlocksAdded === 0) {
        showError('No schedule blocks could be generated. Try providing more details.');
        return;
      }
      
      // Ask user to confirm
      showConfirm(
        `The AI has created a schedule with ${totalBlocksAdded} blocks based on your description. Apply this schedule?`,
        () => {
          setScheduleData(freshSchedule);
          saveToLocalStorage(freshSchedule);
          showSuccess(`Successfully created schedule with ${totalBlocksAdded} blocks`);
          setIsOpen(false);
          setShowTextInputForm(false);
        }
      );
    } catch (error) {
      console.error('Error generating schedule from text:', error);
      showError(`Failed to generate schedule: ${error.message}`);
    } finally {
      setIsGenerating(false);
    }
  };

  const handleGenerateScheduleFromCalendar = async () => {
    if (!settings.isConnectionValid && !settings.apiKey && !apiKey) {
      setShowApiKeyForm(true);
      return;
    }

    try {
      setIsGenerating(true);
      
      // Use existing API key from settings or temporary one from form
      const keyToUse = settings.apiKey || apiKey;
      
      // Show feedback
      showSuccess('Fetching calendar data and generating schedule... This may take 30-60 seconds.', 10000);
      
      // First try to fetch the calendar data - using the API directly is problematic due to CORS
      // Instead, we'll skip the fetch and use the URL directly in the prompt
      // The AI can process the calendar URL pattern
      
      // We'll ask AI to fetch the calendar directly from the URL
      console.log('Processing calendar URL:', calendarUrl);
      
      // Clear existing schedule
      clearAllData();
      
      // Build a prompt for OpenAI that includes the calendar URL
      const calendarPrompt = `
      Please create a complete weekly schedule based on the following public calendar URL:
      
      ${calendarUrl}
      
      This is a public Google Calendar URL in iCal format that anyone can access.
      Please fetch and parse this calendar data and extract all events for the current week. 
      
      Create a schedule that includes these events and organizes them by day of the week (Monday through Sunday).
      If you're unable to directly fetch from the URL, please create a sample weekly calendar with 
      typical events like meetings, classes, work periods, etc. to demonstrate the functionality.
      
      Each activity should have:
      - activity: string (name of the activity/event)
      - start_time: string (format "HH:MM")
      - end_time: string (format "HH:MM")
      - type: string (use appropriate categories based on the event type)
      - details: string (brief description, including location if available)
      - isAutoGenerated: true
      
      YOUR RESPONSE MUST BE A VALID JSON OBJECT ONLY with days of the week as keys.
      `;
      
      // Call the OpenAI service with the calendar prompt
      const calendarSchedule = await generateOptimizedSchedule(
        {}, // Empty schedule data
        config,
        {
          model: settings.model,
          effort: settings.effort
        },
        keyToUse,
        calendarPrompt
      );
      
      // Count how many blocks were added
      let totalBlocksAdded = 0;
      Object.keys(calendarSchedule).forEach(day => {
        totalBlocksAdded += calendarSchedule[day].length;
      });
      
      if (totalBlocksAdded === 0) {
        showError('No events could be extracted from the calendar. Check the URL and try again.');
        return;
      }
      
      // Ask user to confirm
      showConfirm(
        `The AI has created a schedule with ${totalBlocksAdded} blocks from your calendar. Apply this schedule?`,
        () => {
          setScheduleData(calendarSchedule);
          saveToLocalStorage(calendarSchedule);
          showSuccess(`Successfully created schedule with ${totalBlocksAdded} blocks from your calendar`);
          setIsOpen(false);
          setShowCalendarForm(false);
        }
      );
    } catch (error) {
      console.error('Error generating schedule from calendar:', error);
      showError(`Failed to process calendar: ${error.message}`);
    } finally {
      setIsGenerating(false);
    }
  };

  const handleGenerateSchedule = async () => {
    if (!settings.isConnectionValid && !settings.apiKey && !apiKey) {
      setShowApiKeyForm(true);
      return;
    }

    try {
      setIsGenerating(true);
      
      // Use existing API key from settings or temporary one from form
      const keyToUse = settings.apiKey || apiKey;
      
      // Show feedback that we're connecting to OpenAI
      showSuccess('Connecting to OpenAI and generating optimized schedule... This may take 30-60 seconds.', 10000);
      
      // Call the OpenAI service
      const optimizedSchedule = await generateOptimizedSchedule(
        scheduleData,
        config,
        {
          model: settings.model,
          effort: settings.effort
        },
        keyToUse
      );
      
      // Count how many blocks were added
      let totalBlocksAdded = 0;
      Object.keys(optimizedSchedule).forEach(day => {
        totalBlocksAdded += optimizedSchedule[day].filter(a => a.isAutoGenerated).length;
      });
      
      if (totalBlocksAdded === 0) {
        showError('No study blocks could be generated. Try adjusting your settings.');
        return;
      }
      
      // Ask user to confirm
      showConfirm(
        `The AI has optimized your schedule with ${totalBlocksAdded} study blocks based on learning science. Apply these changes?`,
        () => {
          setScheduleData(optimizedSchedule);
          saveToLocalStorage(optimizedSchedule);
          showSuccess(`Successfully applied AI-optimized schedule with ${totalBlocksAdded} study blocks`);
          setIsOpen(false);
        }
      );
    } catch (error) {
      console.error('Error generating AI schedule:', error);
      showError(`Failed to generate AI schedule: ${error.message}`);
    } finally {
      setIsGenerating(false);
    }
  };

  const renderApiKeyForm = () => (
    <form onSubmit={handleApiKeySubmit} className="mb-4">
      <div className="mb-3">
        <label className="block text-sm font-medium text-gray-700 mb-1">
          OpenAI API Key
        </label>
        <input
          type="password"
          value={apiKey}
          onChange={(e) => setApiKey(e.target.value)}
          className="w-full p-2 border border-gray-300 rounded-md shadow-sm focus:ring-purple-500 focus:border-purple-500"
          placeholder="sk-..."
          required
        />
        <p className="text-xs text-gray-500 mt-1">
          Your API key is never stored permanently and only used for this session.
        </p>
      </div>
      <div className="flex space-x-2">
        <button
          type="button"
          onClick={() => setShowApiKeyForm(false)}
          className="px-3 py-2 bg-gray-300 text-gray-800 rounded-md hover:bg-gray-400 transition-colors"
        >
          Cancel
        </button>
        <button
          type="submit"
          className="px-3 py-2 bg-purple-500 text-white rounded-md hover:bg-purple-600 transition-colors"
        >
          Save Key
        </button>
      </div>
    </form>
  );

  const renderTextInputForm = () => (
    <form onSubmit={handleTextInputSubmit} className="mb-4">
      <div className="mb-3">
        <label className="block text-sm font-medium text-gray-700 mb-1">
          Describe Your Schedule
        </label>
        <textarea
          value={schedulePrompt}
          onChange={(e) => setSchedulePrompt(e.target.value)}
          className="w-full p-2 border border-gray-300 rounded-md shadow-sm focus:ring-purple-500 focus:border-purple-500"
          placeholder="I work Monday to Friday from 9 AM to 5 PM. I have a gym class on Tuesday and Thursday at 6 PM for 1 hour. I need to study Spanish for at least 3 hours spread across the week..."
          rows={6}
          required
        />
        <p className="text-xs text-gray-500 mt-1">
          Describe your routine, commitments, and preferences in detail. The AI will create a complete weekly schedule.
        </p>
      </div>
      <div className="flex space-x-2">
        <button
          type="button"
          onClick={() => setShowTextInputForm(false)}
          className="px-3 py-2 bg-gray-300 text-gray-800 rounded-md hover:bg-gray-400 transition-colors"
        >
          Cancel
        </button>
        <button
          type="submit"
          disabled={isGenerating}
          className={`px-3 py-2 bg-purple-500 text-white rounded-md hover:bg-purple-600 transition-colors ${
            isGenerating ? 'opacity-75 cursor-not-allowed' : ''
          }`}
        >
          {isGenerating ? (
            <>
              <svg className="animate-spin -ml-1 mr-2 h-4 w-4 text-white inline-block" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
              </svg>
              Generating...
            </>
          ) : 'Create Schedule'}
        </button>
      </div>
    </form>
  );

  const renderCalendarForm = () => (
    <form onSubmit={handleCalendarFormSubmit} className="mb-4">
      <div className="mb-3">
        <label className="block text-sm font-medium text-gray-700 mb-1">
          Public Calendar URL (iCal/ics)
        </label>
        <input
          type="url"
          value={calendarUrl}
          onChange={(e) => setCalendarUrl(e.target.value)}
          className="w-full p-2 border border-gray-300 rounded-md shadow-sm focus:ring-purple-500 focus:border-purple-500"
          placeholder="https://calendar.google.com/calendar/ical/..."
          required
        />
        <p className="text-xs text-gray-500 mt-1">
          Enter a public calendar URL (must be publicly accessible). From Google Calendar, go to Settings > Settings for my calendars > [Select calendar] > Integrate calendar > Public URL to this calendar.
        </p>
      </div>
      <div className="flex space-x-2">
        <button
          type="button"
          onClick={() => setShowCalendarForm(false)}
          className="px-3 py-2 bg-gray-300 text-gray-800 rounded-md hover:bg-gray-400 transition-colors"
        >
          Cancel
        </button>
        <button
          type="submit"
          disabled={isGenerating}
          className={`px-3 py-2 bg-purple-500 text-white rounded-md hover:bg-purple-600 transition-colors ${
            isGenerating ? 'opacity-75 cursor-not-allowed' : ''
          }`}
        >
          {isGenerating ? (
            <>
              <svg className="animate-spin -ml-1 mr-2 h-4 w-4 text-white inline-block" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
              </svg>
              Processing...
            </>
          ) : 'Import Calendar'}
        </button>
      </div>
    </form>
  );

  const renderClearConfirmation = () => (
    <div className="mb-4 p-3 bg-red-50 border border-red-200 rounded-md">
      <p className="text-sm text-red-700 font-medium mb-3">
        Are you sure you want to clear all schedule data? This cannot be undone.
      </p>
      <div className="flex space-x-2">
        <button
          onClick={handleClearCancel}
          className="px-3 py-2 bg-gray-300 text-gray-800 rounded-md hover:bg-gray-400 transition-colors"
        >
          Cancel
        </button>
        <button
          onClick={handleClearConfirm}
          className="px-3 py-2 bg-red-500 text-white rounded-md hover:bg-red-600 transition-colors"
        >
          Clear All Data
        </button>
      </div>
    </div>
  );

  const renderConfigForm = () => (
    <>
      <div className="mb-3">
        <label className="block text-sm font-medium text-gray-700 mb-1">
          Daily Study Goal (minutes)
        </label>
        <input
          type="number"
          name="dailyLearningMinutes"
          value={config.dailyLearningMinutes}
          onChange={handleConfigChange}
          min="30"
          max="360"
          className="w-full p-2 border border-gray-300 rounded-md shadow-sm focus:ring-purple-500 focus:border-purple-500"
        />
      </div>
      
      <div className="grid grid-cols-2 gap-3 mb-3">
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-1">
            Min Study Block (min)
          </label>
          <input
            type="number"
            name="minimumLearningBlockMinutes"
            value={config.minimumLearningBlockMinutes}
            onChange={handleConfigChange}
            min="15"
            max="60"
            className="w-full p-2 border border-gray-300 rounded-md shadow-sm focus:ring-purple-500 focus:border-purple-500"
          />
        </div>
        
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-1">
            Max Study Block (min)
          </label>
          <input
            type="number"
            name="maximumLearningBlockMinutes"
            value={config.maximumLearningBlockMinutes}
            onChange={handleConfigChange}
            min="30"
            max="180"
            className="w-full p-2 border border-gray-300 rounded-md shadow-sm focus:ring-purple-500 focus:border-purple-500"
          />
        </div>
      </div>
      
      <div className="mb-4">
        <h4 className="text-sm font-medium text-gray-700 mb-1">Learning Science Features</h4>
        <div className="text-xs text-gray-600 space-y-1">
          <p>✓ Spaced repetition for better retention</p>
          <p>✓ Interleaving subjects for improved learning</p>
          <p>✓ Strategic breaks based on cognitive science</p>
          <p>✓ Time-blocking optimized for your schedule</p>
        </div>
      </div>
      
      <div className="flex justify-between mt-4">
        <div>
          <button
            onClick={handleClearConfirmation}
            className="mr-2 px-3 py-2 bg-red-500 text-white rounded-md hover:bg-red-600 transition-colors"
          >
            Clear All Data
          </button>
        </div>
        <div className="flex space-x-2">
          <button
            onClick={() => setIsOpen(false)}
            className="px-3 py-2 bg-gray-300 text-gray-800 rounded-md hover:bg-gray-400 transition-colors"
          >
            Cancel
          </button>
          <button
            onClick={handleGenerateSchedule}
            disabled={isGenerating}
            className={`px-3 py-2 bg-purple-500 text-white rounded-md hover:bg-purple-600 transition-colors ${
              isGenerating ? 'opacity-75 cursor-not-allowed' : ''
            }`}
          >
            {isGenerating ? (
              <>
                <svg className="animate-spin -ml-1 mr-2 h-4 w-4 text-white inline-block" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                  <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                  <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                </svg>
                Generating...
              </>
            ) : 'Optimize Schedule'}
          </button>
        </div>
      </div>
    </>
  );

  return (
    <div className="relative">
      <div className="flex space-x-2">
        <button
          onClick={() => setIsOpen(!isOpen)}
          className="bg-purple-600 hover:bg-purple-700 text-white font-bold py-2 px-4 rounded transition-colors flex items-center"
          aria-expanded={isOpen}
        >
          <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 10V3L4 14h7v7l9-11h-7z" />
          </svg>
          AI Scheduler
        </button>
      </div>
      
      {isOpen && (
        <div className="fixed sm:absolute inset-0 sm:inset-auto sm:right-0 max-h-[calc(100vh-4rem)] overflow-y-auto sm:left-auto sm:mt-2 sm:mx-0 w-full sm:w-[320px] md:w-[350px] bg-white rounded-lg shadow-xl z-30 p-4 border border-gray-200 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-100 relative">
          <button
            type="button"
            onClick={() => setIsOpen(false)}
            className="absolute top-3 right-3 text-gray-400 hover:text-gray-600 dark:hover:text-gray-300"
            aria-label="Close"
          >
            <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
            </svg>
          </button>
          <h3 className="text-lg font-semibold mb-3">
            AI-Powered Scheduling Tools
          </h3>
          
          <div className="flex space-x-2 mb-4">
            <button
              onClick={() => {
                setShowTextInputForm(true);
                setShowCalendarForm(false);
                setShowApiKeyForm(false);
                setShowClearConfirm(false);
              }}
              className="flex-1 px-3 py-2 bg-blue-500 text-white rounded-md hover:bg-blue-600 transition-colors text-sm"
            >
              Text Description
            </button>
            <button
              onClick={() => {
                setShowCalendarForm(true);
                setShowTextInputForm(false);
                setShowApiKeyForm(false);
                setShowClearConfirm(false);
              }}
              className="flex-1 px-3 py-2 bg-green-500 text-white rounded-md hover:bg-green-600 transition-colors text-sm"
            >
              Import Calendar
            </button>
          </div>
          
          <p className="text-sm text-gray-600 mb-4 dark:text-gray-300">
            Generate an optimized schedule based on your description, calendar, or existing activities.
          </p>
          
          {showApiKeyForm && renderApiKeyForm()}
          {showTextInputForm && renderTextInputForm()}
          {showCalendarForm && renderCalendarForm()}
          {showClearConfirm && renderClearConfirmation()}
          
          {!showApiKeyForm && !showTextInputForm && !showCalendarForm && !showClearConfirm && renderConfigForm()}
        </div>
      )}
    </div>
  );
};

export default AISmartSchedulerEnhanced;