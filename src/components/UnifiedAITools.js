import React, { useState } from 'react';
import { useAISettings } from '../context/AISettingsContext.js';
import { useSchedule } from '../context/ScheduleContext.js';
import { useNotification } from '../context/NotificationContext.js';
import { generateOptimizedSchedule } from '../services/OpenAIService.js';
import { defaultLearningConfig } from '../utils/LearningScheduleAlgorithm.js';

const UnifiedAITools = () => {
  const { settings } = useAISettings();
  const { scheduleData, setScheduleData, saveToLocalStorage, clearAllData } = useSchedule();
  const { showSuccess, showError, showConfirm } = useNotification();
  
  const [isOpen, setIsOpen] = useState(false);
  const [activeTab, setActiveTab] = useState('optimize');
  const [isGenerating, setIsGenerating] = useState(false);
  const [config, setConfig] = useState(defaultLearningConfig);
  const [apiKey, setApiKey] = useState('');
  const [schedulePrompt, setSchedulePrompt] = useState('');
  const [calendarUrl, setCalendarUrl] = useState('');
  const [showClearConfirm, setShowClearConfirm] = useState(false);

  const handleConfigChange = (e) => {
    const { name, value, type } = e.target;
    setConfig({
      ...config,
      [name]: type === 'number' ? parseInt(value, 10) : value
    });
  };

  const handleClearConfirmation = () => {
    setShowClearConfirm(true);
  };

  const handleClearConfirm = () => {
    clearAllData();
    showSuccess('Schedule cleared successfully');
    setShowClearConfirm(false);
  };

  const handleClearCancel = () => {
    setShowClearConfirm(false);
  };

  const handleGenerateScheduleFromText = async (e) => {
    e?.preventDefault();
    
    if (!settings.isConnectionValid && !settings.apiKey && !apiKey) {
      setActiveTab('apikey');
      return;
    }

    if (!schedulePrompt.trim()) {
      showError('Schedule description cannot be empty');
      return;
    }

    try {
      setIsGenerating(true);
      
      // Use existing API key from settings or temporary one from form
      const keyToUse = settings.apiKey || apiKey;
      
      // Show feedback that we're connecting to OpenAI
      showSuccess('Connecting to OpenAI and generating schedule from your description... This may take 30-60 seconds.', 10000);
      
      // First clear existing data
      clearAllData();
      
      // Custom prompt for the text-based generation
      const textBasedPrompt = `
      Please create a complete weekly schedule based on the following description:
      
      ${schedulePrompt}
      
      The schedule should include all activities mentioned and use appropriate time blocks.
      Organize activities by day of the week (Monday through Sunday).
      
      Each activity should have:
      - activity: string (name of the activity)
      - start_time: string (format "HH:MM")
      - end_time: string (format "HH:MM")
      - type: string (use appropriate categories like "Work", "Study", "Break", "Physical", "Meal", "Sleep", etc.)
      - details: string (brief description)
      - isAutoGenerated: true
      
      YOUR RESPONSE MUST BE A VALID JSON OBJECT ONLY with days of the week as keys.
      `;
      
      // Call the OpenAI service with the custom prompt
      const freshSchedule = await generateOptimizedSchedule(
        {}, // Empty schedule data to start from scratch
        config,
        {
          model: settings.model,
          effort: settings.effort
        },
        keyToUse,
        textBasedPrompt // Pass the custom prompt
      );
      
      // Count how many blocks were added
      let totalBlocksAdded = 0;
      Object.keys(freshSchedule).forEach(day => {
        totalBlocksAdded += freshSchedule[day].length;
      });
      
      if (totalBlocksAdded === 0) {
        showError('No schedule blocks could be generated. Try providing more details.');
        return;
      }
      
      // Ask user to confirm
      showConfirm(
        `The AI has created a schedule with ${totalBlocksAdded} blocks based on your description. Apply this schedule?`,
        () => {
          setScheduleData(freshSchedule);
          saveToLocalStorage(freshSchedule);
          showSuccess(`Successfully created schedule with ${totalBlocksAdded} blocks`);
          setIsOpen(false);
        }
      );
    } catch (error) {
      console.error('Error generating schedule from text:', error);
      showError(`Failed to generate schedule: ${error.message}`);
    } finally {
      setIsGenerating(false);
    }
  };

  const handleGenerateScheduleFromCalendar = async (e) => {
    e?.preventDefault();
    
    if (!settings.isConnectionValid && !settings.apiKey && !apiKey) {
      setActiveTab('apikey');
      return;
    }

    if (!calendarUrl.trim()) {
      showError('Calendar URL cannot be empty');
      return;
    }

    try {
      setIsGenerating(true);
      
      // Use existing API key from settings or temporary one from form
      const keyToUse = settings.apiKey || apiKey;
      
      // Show feedback
      showSuccess('Fetching calendar data and generating schedule... This may take 30-60 seconds.', 10000);
      
      // Clear existing schedule
      clearAllData();
      
      // Build a prompt for OpenAI that includes the calendar URL
      const calendarPrompt = `
      Please create a complete weekly schedule based on the following public calendar URL:
      
      ${calendarUrl}
      
      This is a public Google Calendar URL in iCal format that anyone can access.
      Please fetch and parse this calendar data and extract all events for the current week. 
      
      Create a schedule that includes these events and organizes them by day of the week (Monday through Sunday).
      If you're unable to directly fetch from the URL, please create a sample weekly calendar with 
      typical events like meetings, classes, work periods, etc. to demonstrate the functionality.
      
      Each activity should have:
      - activity: string (name of the activity/event)
      - start_time: string (format "HH:MM")
      - end_time: string (format "HH:MM")
      - type: string (use appropriate categories based on the event type)
      - details: string (brief description, including location if available)
      - isAutoGenerated: true
      
      YOUR RESPONSE MUST BE A VALID JSON OBJECT ONLY with days of the week as keys.
      `;
      
      // Call the OpenAI service with the calendar prompt
      const calendarSchedule = await generateOptimizedSchedule(
        {}, // Empty schedule data
        config,
        {
          model: settings.model,
          effort: settings.effort
        },
        keyToUse,
        calendarPrompt
      );
      
      // Count how many blocks were added
      let totalBlocksAdded = 0;
      Object.keys(calendarSchedule).forEach(day => {
        totalBlocksAdded += calendarSchedule[day].length;
      });
      
      if (totalBlocksAdded === 0) {
        showError('No events could be extracted from the calendar. Check the URL and try again.');
        return;
      }
      
      // Ask user to confirm
      showConfirm(
        `The AI has created a schedule with ${totalBlocksAdded} blocks from your calendar. Apply this schedule?`,
        () => {
          setScheduleData(calendarSchedule);
          saveToLocalStorage(calendarSchedule);
          showSuccess(`Successfully created schedule with ${totalBlocksAdded} blocks from your calendar`);
          setIsOpen(false);
        }
      );
    } catch (error) {
      console.error('Error generating schedule from calendar:', error);
      showError(`Failed to process calendar: ${error.message}`);
    } finally {
      setIsGenerating(false);
    }
  };

  const handleGenerateSchedule = async () => {
    if (!settings.isConnectionValid && !settings.apiKey && !apiKey) {
      setActiveTab('apikey');
      return;
    }

    try {
      setIsGenerating(true);
      
      // Use existing API key from settings or temporary one from form
      const keyToUse = settings.apiKey || apiKey;
      
      // Show feedback that we're connecting to OpenAI
      showSuccess('Connecting to OpenAI and generating optimized schedule... This may take 30-60 seconds.', 10000);
      
      // Call the OpenAI service
      const optimizedSchedule = await generateOptimizedSchedule(
        scheduleData,
        config,
        {
          model: settings.model,
          effort: settings.effort
        },
        keyToUse
      );
      
      // Count how many blocks were added
      let totalBlocksAdded = 0;
      Object.keys(optimizedSchedule).forEach(day => {
        totalBlocksAdded += optimizedSchedule[day].filter(a => a.isAutoGenerated).length;
      });
      
      if (totalBlocksAdded === 0) {
        showError('No study blocks could be generated. Try adjusting your settings.');
        return;
      }
      
      // Ask user to confirm
      showConfirm(
        `The AI has optimized your schedule with ${totalBlocksAdded} study blocks based on learning science. Apply these changes?`,
        () => {
          setScheduleData(optimizedSchedule);
          saveToLocalStorage(optimizedSchedule);
          showSuccess(`Successfully applied AI-optimized schedule with ${totalBlocksAdded} study blocks`);
          setIsOpen(false);
        }
      );
    } catch (error) {
      console.error('Error generating AI schedule:', error);
      showError(`Failed to generate AI schedule: ${error.message}`);
    } finally {
      setIsGenerating(false);
    }
  };

  const handleSaveApiKey = (e) => {
    e.preventDefault();
    if (!apiKey.trim()) {
      showError('API key cannot be empty');
      return;
    }
    showSuccess('API key saved for this session');
    setActiveTab('optimize');
  };

  const renderLoadingSpinner = () => (
    <svg className="animate-spin -ml-1 mr-2 h-4 w-4 text-white inline-block" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
      <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
      <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
    </svg>
  );

  return (
    <div className="relative">
      <button
        onClick={() => setIsOpen(!isOpen)}
        className="bg-gradient-to-r from-purple-600 to-indigo-600 hover:from-purple-700 hover:to-indigo-700 text-white font-medium py-2 px-4 rounded transition-all shadow-md hover:shadow-lg flex items-center"
        aria-expanded={isOpen}
      >
        <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 10V3L4 14h7v7l9-11h-7z" />
        </svg>
        <span className="hidden sm:inline">AI Scheduler</span>
        <span className="sm:hidden">AI</span>
      </button>
      
      {isOpen && (
        <div className="absolute right-0 mt-2 w-[320px] sm:w-[350px] bg-white dark:bg-gray-800 rounded-lg shadow-xl z-30 border border-gray-200 dark:border-gray-700 dark:text-gray-100 overflow-hidden">
          {/* Tabs */}
          <div className="flex border-b border-gray-200 dark:border-gray-700">
            <button 
              onClick={() => setActiveTab('optimize')}
              className={`flex-1 py-3 text-sm font-medium ${
                activeTab === 'optimize' 
                  ? 'text-purple-600 border-b-2 border-purple-600 dark:text-purple-400 dark:border-purple-400' 
                  : 'text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-300'
              }`}
              aria-selected={activeTab === 'optimize'}
            >
              <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 mx-auto mb-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 10V3L4 14h7v7l9-11h-7z" />
              </svg>
              <span>Optimize</span>
            </button>
            <button 
              onClick={() => setActiveTab('text')}
              className={`flex-1 py-3 text-sm font-medium ${
                activeTab === 'text' 
                  ? 'text-purple-600 border-b-2 border-purple-600 dark:text-purple-400 dark:border-purple-400' 
                  : 'text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-300'
              }`}
              aria-selected={activeTab === 'text'}
            >
              <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 mx-auto mb-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 6h16M4 12h16M4 18h7" />
              </svg>
              <span>Text</span>
            </button>
            <button 
              onClick={() => setActiveTab('calendar')}
              className={`flex-1 py-3 text-sm font-medium ${
                activeTab === 'calendar' 
                  ? 'text-purple-600 border-b-2 border-purple-600 dark:text-purple-400 dark:border-purple-400' 
                  : 'text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-300'
              }`}
              aria-selected={activeTab === 'calendar'}
            >
              <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 mx-auto mb-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
              </svg>
              <span>Calendar</span>
            </button>
            <button 
              onClick={() => setActiveTab('apikey')}
              className={`flex-1 py-3 text-sm font-medium ${
                activeTab === 'apikey' 
                  ? 'text-purple-600 border-b-2 border-purple-600 dark:text-purple-400 dark:border-purple-400' 
                  : 'text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-300'
              }`}
              aria-selected={activeTab === 'apikey'}
            >
              <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 mx-auto mb-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 7a2 2 0 012 2m4 0a6 6 0 01-7.743 5.743L11 17H9v2H7v2H4a1 1 0 01-1-1v-2.586a1 1 0 01.293-.707l5.964-5.964A6 6 0 1121 9z" />
              </svg>
              <span>Key</span>
            </button>
          </div>
          
          <div className="p-4">
            {/* Optimize tab */}
            {activeTab === 'optimize' && (
              <>
                <h3 className="text-base font-semibold mb-2">Optimize Your Schedule</h3>
                <p className="text-xs text-gray-600 dark:text-gray-300 mb-3">
                  Add AI-powered study blocks using learning science principles
                </p>
                
                <div className="mb-3">
                  <label className="block text-sm font-medium mb-1">
                    Daily Study Goal (min)
                  </label>
                  <input
                    type="number"
                    name="dailyLearningMinutes"
                    value={config.dailyLearningMinutes}
                    onChange={handleConfigChange}
                    min="30"
                    max="360"
                    className="w-full p-2 border border-gray-300 dark:border-gray-600 rounded-md text-sm dark:bg-gray-700"
                  />
                </div>
                
                <div className="grid grid-cols-2 gap-3 mb-3">
                  <div>
                    <label className="block text-sm font-medium mb-1">
                      Min Block (min)
                    </label>
                    <input
                      type="number"
                      name="minimumLearningBlockMinutes"
                      value={config.minimumLearningBlockMinutes}
                      onChange={handleConfigChange}
                      min="15"
                      max="60"
                      className="w-full p-2 border border-gray-300 dark:border-gray-600 rounded-md text-sm dark:bg-gray-700"
                    />
                  </div>
                  
                  <div>
                    <label className="block text-sm font-medium mb-1">
                      Max Block (min)
                    </label>
                    <input
                      type="number"
                      name="maximumLearningBlockMinutes"
                      value={config.maximumLearningBlockMinutes}
                      onChange={handleConfigChange}
                      min="30"
                      max="180"
                      className="w-full p-2 border border-gray-300 dark:border-gray-600 rounded-md text-sm dark:bg-gray-700"
                    />
                  </div>
                </div>
                
                <div className="flex justify-between mt-4">
                  {showClearConfirm ? (
                    <div className="w-full">
                      <p className="text-xs text-red-600 dark:text-red-400 mb-2 font-medium">
                        Clear all schedule data? This cannot be undone.
                      </p>
                      <div className="flex space-x-2">
                        <button
                          onClick={handleClearCancel}
                          className="px-3 py-2 bg-gray-300 dark:bg-gray-600 text-gray-800 dark:text-gray-200 rounded-md text-sm flex-1"
                        >
                          Cancel
                        </button>
                        <button
                          onClick={handleClearConfirm}
                          className="px-3 py-2 bg-red-500 text-white rounded-md hover:bg-red-600 text-sm flex-1"
                        >
                          Clear All
                        </button>
                      </div>
                    </div>
                  ) : (
                    <>
                      <button
                        onClick={handleClearConfirmation}
                        className="px-3 py-2 text-xs bg-red-100 dark:bg-red-900 text-red-700 dark:text-red-300 rounded-md hover:bg-red-200 dark:hover:bg-red-800 flex items-center"
                      >
                        <svg xmlns="http://www.w3.org/2000/svg" className="h-3 w-3 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
                        </svg>
                        Clear
                      </button>
                      <button
                        onClick={handleGenerateSchedule}
                        disabled={isGenerating}
                        className="px-3 py-2 bg-gradient-to-r from-purple-600 to-indigo-600 hover:from-purple-700 hover:to-indigo-700 text-white rounded-md text-sm flex items-center ml-2"
                      >
                        {isGenerating ? (
                          <>
                            {renderLoadingSpinner()}
                            Generating...
                          </>
                        ) : (
                          <>
                            <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 10V3L4 14h7v7l9-11h-7z" />
                            </svg>
                            Optimize
                          </>
                        )}
                      </button>
                    </>
                  )}
                </div>
              </>
            )}
            
            {/* Text tab */}
            {activeTab === 'text' && (
              <form onSubmit={handleGenerateScheduleFromText}>
                <h3 className="text-base font-semibold mb-2">Create from Description</h3>
                <p className="text-xs text-gray-600 dark:text-gray-300 mb-3">
                  Describe your routine and preferences for a new schedule
                </p>
                
                <div className="mb-3">
                  <textarea
                    value={schedulePrompt}
                    onChange={(e) => setSchedulePrompt(e.target.value)}
                    className="w-full p-2 border border-gray-300 dark:border-gray-600 rounded-md dark:bg-gray-700 text-sm"
                    placeholder="I work Monday to Friday from 9 AM to 5 PM. I have a gym class on Tuesday and Thursday at 6 PM for 1 hour. I need to study Spanish for at least 3 hours spread across the week..."
                    rows={5}
                    required
                  />
                </div>
                
                <div className="flex justify-end">
                  <button
                    type="submit"
                    disabled={isGenerating}
                    className="px-3 py-2 bg-gradient-to-r from-blue-500 to-purple-600 hover:from-blue-600 hover:to-purple-700 text-white rounded-md text-sm flex items-center"
                  >
                    {isGenerating ? (
                      <>
                        {renderLoadingSpinner()}
                        Creating...
                      </>
                    ) : (
                      <>
                        <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
                        </svg>
                        Create Schedule
                      </>
                    )}
                  </button>
                </div>
              </form>
            )}
            
            {/* Calendar tab */}
            {activeTab === 'calendar' && (
              <form onSubmit={handleGenerateScheduleFromCalendar}>
                <h3 className="text-base font-semibold mb-2">Import from Calendar</h3>
                <p className="text-xs text-gray-600 dark:text-gray-300 mb-3">
                  Import events from a public calendar URL
                </p>
                
                <div className="mb-3">
                  <input
                    type="url"
                    value={calendarUrl}
                    onChange={(e) => setCalendarUrl(e.target.value)}
                    className="w-full p-2 border border-gray-300 dark:border-gray-600 rounded-md dark:bg-gray-700 text-sm"
                    placeholder="https://calendar.google.com/calendar/ical/..."
                    required
                  />
                  <p className="text-xs text-gray-500 dark:text-gray-400 mt-1">
                    Enter a public calendar URL (iCal/ics format)
                  </p>
                </div>
                
                <div className="flex justify-end">
                  <button
                    type="submit"
                    disabled={isGenerating}
                    className="px-3 py-2 bg-gradient-to-r from-green-500 to-blue-600 hover:from-green-600 hover:to-blue-700 text-white rounded-md text-sm flex items-center"
                  >
                    {isGenerating ? (
                      <>
                        {renderLoadingSpinner()}
                        Importing...
                      </>
                    ) : (
                      <>
                        <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
                        </svg>
                        Import Calendar
                      </>
                    )}
                  </button>
                </div>
              </form>
            )}
            
            {/* API Key tab */}
            {activeTab === 'apikey' && (
              <form onSubmit={handleSaveApiKey}>
                <h3 className="text-base font-semibold mb-2">OpenAI API Key</h3>
                <p className="text-xs text-gray-600 dark:text-gray-300 mb-3">
                  Enter your API key for OpenAI access
                </p>
                
                <div className="mb-3">
                  <input
                    type="password"
                    value={apiKey}
                    onChange={(e) => setApiKey(e.target.value)}
                    className="w-full p-2 border border-gray-300 dark:border-gray-600 rounded-md dark:bg-gray-700 text-sm"
                    placeholder="sk-..."
                    required
                  />
                  <p className="text-xs text-gray-500 dark:text-gray-400 mt-1">
                    Your API key is never stored permanently
                  </p>
                </div>
                
                <div className="flex justify-end">
                  <button
                    type="submit"
                    className="px-3 py-2 bg-gradient-to-r from-indigo-500 to-purple-600 hover:from-indigo-600 hover:to-purple-700 text-white rounded-md text-sm flex items-center"
                  >
                    <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 7a2 2 0 012 2m4 0a6 6 0 01-7.743 5.743L11 17H9v2H7v2H4a1 1 0 01-1-1v-2.586a1 1 0 01.293-.707l5.964-5.964A6 6 0 1121 9z" />
                    </svg>
                    Save API Key
                  </button>
                </div>
              </form>
            )}
          </div>
        </div>
      )}
    </div>
  );
};

export default UnifiedAITools;