import React, { useState } from 'react';
import { useAISettings } from '../context/AISettingsContext.js';
import { useSchedule } from '../context/ScheduleContext.js';
import { useNotification } from '../context/NotificationContext.js';
import { generateOptimizedSchedule } from '../services/OpenAIService.js';
import { defaultLearningConfig } from '../utils/LearningScheduleAlgorithm.js';

const AISmartScheduler = () => {
  const { settings } = useAISettings();
  const { scheduleData, setScheduleData, saveToLocalStorage } = useSchedule();
  const { showSuccess, showError, showConfirm } = useNotification();
  
  const [isOpen, setIsOpen] = useState(false);
  const [isGenerating, setIsGenerating] = useState(false);
  const [config, setConfig] = useState(defaultLearningConfig);
  const [showApiKeyForm, setShowApiKeyForm] = useState(false);
  const [apiKey, setApiKey] = useState('');

  const handleApiKeySubmit = (e) => {
    e.preventDefault();
    if (!apiKey.trim()) {
      showError('API key cannot be empty');
      return;
    }
    setShowApiKeyForm(false);
  };

  const handleConfigChange = (e) => {
    const { name, value, type } = e.target;
    setConfig({
      ...config,
      [name]: type === 'number' ? parseInt(value, 10) : value
    });
  };

  const handleGenerateSchedule = async () => {
    if (!settings.isConnectionValid && !settings.apiKey && !apiKey) {
      setShowApiKeyForm(true);
      return;
    }

    try {
      setIsGenerating(true);
      
      // Use existing API key from settings or temporary one from form
      const keyToUse = settings.apiKey || apiKey;
      
      // Show feedback that we're connecting to OpenAI
      showSuccess('Connecting to OpenAI and generating optimized schedule... This may take 30-60 seconds.', 10000);
      
      // Call the OpenAI service
      const optimizedSchedule = await generateOptimizedSchedule(
        scheduleData,
        config,
        {
          model: settings.model,
          effort: settings.effort
        },
        keyToUse
      );
      
      // Count how many blocks were added
      let totalBlocksAdded = 0;
      Object.keys(optimizedSchedule).forEach(day => {
        totalBlocksAdded += optimizedSchedule[day].filter(a => a.isAutoGenerated).length;
      });
      
      if (totalBlocksAdded === 0) {
        showError('No study blocks could be generated. Try adjusting your settings.');
        return;
      }
      
      // Ask user to confirm
      showConfirm(
        `The AI has optimized your schedule with ${totalBlocksAdded} study blocks based on learning science. Apply these changes?`,
        () => {
          setScheduleData(optimizedSchedule);
          saveToLocalStorage(optimizedSchedule);
          showSuccess(`Successfully applied AI-optimized schedule with ${totalBlocksAdded} study blocks`);
          setIsOpen(false);
        }
      );
    } catch (error) {
      console.error('Error generating AI schedule:', error);
      showError(`Failed to generate AI schedule: ${error.message}`);
    } finally {
      setIsGenerating(false);
    }
  };

  return (
    <div className="relative">
      <button
        onClick={() => setIsOpen(!isOpen)}
        className="bg-purple-600 hover:bg-purple-700 text-white font-bold py-2 px-4 rounded transition-colors flex items-center"
        aria-expanded={isOpen}
      >
        <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 10V3L4 14h7v7l9-11h-7z" />
        </svg>
        AI Smart Scheduler
      </button>
      
      {isOpen && (
        <div className="absolute right-0 mt-2 w-96 bg-white rounded-lg shadow-xl z-30 p-4 border border-gray-200">
          <h3 className="text-lg font-semibold text-gray-800 mb-3">
            AI-Powered Smart Scheduling
          </h3>
          
          <p className="text-sm text-gray-600 mb-4">
            Generate an optimized study schedule based on learning science principles like spaced repetition, interleaving, and cognitive breaks.
          </p>
          
          {showApiKeyForm ? (
            <form onSubmit={handleApiKeySubmit} className="mb-4">
              <div className="mb-3">
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  OpenAI API Key
                </label>
                <input
                  type="password"
                  value={apiKey}
                  onChange={(e) => setApiKey(e.target.value)}
                  className="w-full p-2 border border-gray-300 rounded-md shadow-sm focus:ring-purple-500 focus:border-purple-500"
                  placeholder="sk-..."
                  required
                />
                <p className="text-xs text-gray-500 mt-1">
                  Your API key is never stored permanently and only used for this session.
                </p>
              </div>
              <div className="flex space-x-2">
                <button
                  type="button"
                  onClick={() => setShowApiKeyForm(false)}
                  className="px-3 py-2 bg-gray-300 text-gray-800 rounded-md hover:bg-gray-400 transition-colors"
                >
                  Cancel
                </button>
                <button
                  type="submit"
                  className="px-3 py-2 bg-purple-500 text-white rounded-md hover:bg-purple-600 transition-colors"
                >
                  Save Key
                </button>
              </div>
            </form>
          ) : (
            <>
              <div className="mb-3">
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  Daily Study Goal (minutes)
                </label>
                <input
                  type="number"
                  name="dailyLearningMinutes"
                  value={config.dailyLearningMinutes}
                  onChange={handleConfigChange}
                  min="30"
                  max="360"
                  className="w-full p-2 border border-gray-300 rounded-md shadow-sm focus:ring-purple-500 focus:border-purple-500"
                />
              </div>
              
              <div className="grid grid-cols-2 gap-3 mb-3">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    Min Study Block (min)
                  </label>
                  <input
                    type="number"
                    name="minimumLearningBlockMinutes"
                    value={config.minimumLearningBlockMinutes}
                    onChange={handleConfigChange}
                    min="15"
                    max="60"
                    className="w-full p-2 border border-gray-300 rounded-md shadow-sm focus:ring-purple-500 focus:border-purple-500"
                  />
                </div>
                
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    Max Study Block (min)
                  </label>
                  <input
                    type="number"
                    name="maximumLearningBlockMinutes"
                    value={config.maximumLearningBlockMinutes}
                    onChange={handleConfigChange}
                    min="30"
                    max="180"
                    className="w-full p-2 border border-gray-300 rounded-md shadow-sm focus:ring-purple-500 focus:border-purple-500"
                  />
                </div>
              </div>
              
              <div className="mb-4">
                <h4 className="text-sm font-medium text-gray-700 mb-1">Learning Science Features</h4>
                <div className="text-xs text-gray-600 space-y-1">
                  <p>✓ Spaced repetition for better retention</p>
                  <p>✓ Interleaving subjects for improved learning</p>
                  <p>✓ Strategic breaks based on cognitive science</p>
                  <p>✓ Time-blocking optimized for your schedule</p>
                </div>
              </div>
              
              <div className="flex justify-end space-x-3 mt-4">
                <button
                  onClick={() => setIsOpen(false)}
                  className="px-4 py-2 bg-gray-300 text-gray-800 rounded-md hover:bg-gray-400 transition-colors"
                >
                  Cancel
                </button>
                <button
                  onClick={handleGenerateSchedule}
                  disabled={isGenerating}
                  className={`px-4 py-2 bg-purple-500 text-white rounded-md hover:bg-purple-600 transition-colors ${
                    isGenerating ? 'opacity-75 cursor-not-allowed' : ''
                  }`}
                >
                  {isGenerating ? (
                    <>
                      <svg className="animate-spin -ml-1 mr-2 h-4 w-4 text-white inline-block" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                        <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                        <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                      </svg>
                      Generating...
                    </>
                  ) : 'Generate AI Schedule'}
                </button>
              </div>
            </>
          )}
        </div>
      )}
    </div>
  );
};

export default AISmartScheduler;